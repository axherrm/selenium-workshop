// Generated by Selenium IDE
import org.apache.commons.io.FileUtils;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.util.*;

public class Exercise3ClockTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    ChromeOptions options = new ChromeOptions();
//    options.addArguments("--headless=new");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test // Aufgabe 4.c
  public void checkSeconds() {
    driver.get("https://clock.zone/");
    driver.manage().window().setSize(new Dimension(1200, 941));
    assertThat(driver.findElement(By.id("ss")).getText(), is(getCurrentSeconds()));
    driver.close();
  }

  private String getCurrentSeconds() {
    int seconds = Calendar.getInstance().get(Calendar.SECOND);
    String secondsString = Integer.valueOf(seconds).toString();
    if (secondsString.length() == 1) {
      return "0" + secondsString;
    } else if (secondsString.length() == 2) {
      return secondsString;
    } else {
      throw new IllegalStateException("seconds is expected to have 1 or 2 characters");
    }
  }

  @Test // Aufgabe 4.d
  public void makeScreenshot() throws IOException, InterruptedException {
    driver.get("https://clock.zone/");
    driver.manage().window().setSize(new Dimension(1200, 941));
    File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
    FileUtils.copyFile(screenshot, new File("./out/", "Aufgabe3d.png"));
    driver.close();
  }

  @Test // Aufgabe 4.e
  public void makeScreenshotAcceptCookies() throws IOException, InterruptedException {
    driver.get("https://clock.zone/");
    driver.manage().window().setSize(new Dimension(1200, 941));

    driver.findElement(By.id("cmpwrapper")).getShadowRoot().findElement(By.cssSelector("#cmpwelcomebtnyes > a")).click();

    File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
    FileUtils.copyFile(screenshot, new File("./out/", "Aufgabe3e.png"));

    driver.close();
  }

  @Test // Aufgabe 4.f
  public void makeScreenshotDividableBy10() throws IOException, InterruptedException {
    driver.get("https://clock.zone/");
    driver.manage().window().setSize(new Dimension(1200, 941));

    driver.findElement(By.id("cmpwrapper")).getShadowRoot().findElement(By.cssSelector("#cmpwelcomebtnyes > a")).click();

    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(60));
    wait.until(webDriver -> {
      String secondsString = webDriver.findElement(By.id("ss")).getText();
      if (secondsString.length() != 2) {
        return false;
      }
      return (Integer.parseInt(secondsString) % 10) == 0;
    });

    File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
    FileUtils.copyFile(screenshot, new File("./out/", "Aufgabe3f.png"));

    driver.close();
  }

  @Test // Aufgabe 4.g
  public void makeScreenshotOnlyClock() throws IOException, InterruptedException {
    driver.get("https://clock.zone/");
    driver.manage().window().setSize(new Dimension(1200, 941));

    driver.findElement(By.id("cmpwrapper")).getShadowRoot().findElement(By.cssSelector("#cmpwelcomebtnyes > a")).click();

    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(60));
    wait.until(webDriver -> {
      String secondsString = webDriver.findElement(By.id("ss")).getText();
      assertEquals(2, secondsString.length());
      return (Integer.parseInt(secondsString) % 10) == 0;
    });

    File screenshot = driver.findElement(By.id("MyClockDisplay")).getScreenshotAs(OutputType.FILE);
    FileUtils.copyFile(screenshot, new File("./out/", "Aufgabe3g.png"));

    driver.close();
  }

}
